import { NextRequest, NextResponse } from 'next/server'

// This would typically connect to your database
// For now, we'll simulate a database response
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    
    // Validate required fields
    if (!body.name || !body.price || !body.stock || !body.category) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      )
    }

    // Simulate database insertion
    // In a real app, you would save to your database here
    const newProduct = {
      id: Date.now(), // In real app, this would be generated by your database
      name: body.name,
      price: parseFloat(body.price),
      stock: parseInt(body.stock),
      category: body.category,
      description: body.description || '',
      image: body.image || '/placeholder.svg',
      createdAt: new Date().toISOString()
    }

    // Simulate a small delay like a real database call
    await new Promise(resolve => setTimeout(resolve, 500))

    return NextResponse.json(newProduct, { status: 201 })
  } catch (error) {
    console.error('Error creating product:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}

// GET endpoint to fetch all products
export async function GET() {
  try {
    // In a real app, you would fetch from your database
    const products = [
      { id: 1, name: "20lb Propane Tank", price: 24.99, stock: 45, category: "Tanks", description: "Standard 20-pound propane tank perfect for grills and outdoor equipment.", image: "/propane-tank.png" },
      { id: 2, name: "High-Pressure Regulator", price: 45.99, stock: 23, category: "Regulators", description: "Professional-grade regulator for consistent propane flow and safety.", image: "/propane-regulator.png" },
      { id: 3, name: "10ft Propane Hose", price: 32.99, stock: 18, category: "Hoses", description: "Durable, flexible hose with safety shut-off valve included.", image: "/propane-hose.png" },
    ]

    return NextResponse.json(products)
  } catch (error) {
    console.error('Error fetching products:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}
